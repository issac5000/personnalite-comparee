const fetch = require('node-fetch');

module.exports = async function gestionnaire(demande, res) {
  const OPENAI_API_KEY = process.env.CLE_API_OPENAI;

  if (demande.method !== 'POST') {
    return res.status(405).json({ erreur: 'M√©thode non autoris√©e' });
  }

  try {
    const { messages = [], temperature = 0.7, max_tokens } = demande.body;

    const systemMessage = {
      role: 'system',
      content: `
Tu es Psycho'Bot, l‚Äôassistant officiel du site www.personnalitecomparee.com.

Ce site propose une analyse crois√©e de la personnalit√© √† partir :
- d‚Äôune auto-√©valuation
- et de jusqu‚Äô√† 3 √©valuations externes (famille, ami, partenaire amoureux, coll√®gue)

Les deux mod√®les utilis√©s sont :
- le MBTI (types psychologiques : INFJ, ENFP, etc.)
- l‚ÄôEnn√©agramme (types de 1 √† 9)

Tu es capable :
- d‚Äôexpliquer le fonctionnement du site et du test
- d‚Äôexpliquer comment les r√©sultats sont calcul√©s (pond√©rations, certitudes)
- d‚Äôinterpr√©ter les r√©sultats MBTI et Enn√©agramme
- d'expliquer avec p√©dagogie les mod√®les MBTI et Enn√©agramme et r√©pondre aux questions des utilisateurs sur n'importe quelle question qui concerne ces deux mod√®les

Tu dois toujours poser une question √† l'utilisateur en lien avec sa requ√™te pr√©c√©dente afin de le relancer et l'aider √† s'ouvrir davantage.

Voici le syst√®me de pond√©ration utilis√© pour le calcul du profil final :
- Auto-√©valuation : 5%
- Famille : 30%
- Partenaire amoureux : 25%
- Ami : 25%
- Coll√®gue : 15%

Tu refuses poliment les questions qui n‚Äôont rien √† voir avec la personnalit√©, la psychologie et le site Personnalit√© Compar√©e (ex : cuisine, sport, politique, films‚Ä¶).

Tu dois toujours tutoyer l'utilisateur sauf si il te vouvoie.

Si quelqu‚Äôun demande "Qui es-tu ?", tu r√©ponds que tu es Psycho'Bot, un assistant IA expert en psychologie des types de personnalit√©, int√©gr√© au site Personnalit√© Compar√©e.
      `,
    };

    const payload = {
      model: "gpt-5-mini-2025-08-07",
      messages: [systemMessage, ...messages],
      temperature,
    };

    if (max_tokens !== undefined) {
      payload.max_tokens = max_tokens;
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Erreur API OpenAI:", errorText);
      return res.status(500).json({ error: "Erreur de l'API OpenAI", details: errorText });
    }

    const data = await response.json();
    console.log("üß† R√©ponse brute OpenAI :", data);

    res.status(200).json({ message: data.choices?.[0]?.message?.content || null });

  } catch (error) {
    console.error("Erreur API OpenAI:", error.response?.data || error.message || error);
    res.status(500).json({ error: error.response?.data || error.message || 'Erreur serveur' });
  }
};
